module ps2_lab1(CLOCK_50, KEY, SW, HEX0,HEX1,HEX2,HEX3, LEDG,LEDR, PS2_DAT, PS2_CLK, GPIO_0, GPIO_1, led,led2);

  input  CLOCK_50;
  input  [3:0]  KEY;
  input  [17:0]  SW;
  output  [6:0]  HEX0,HEX1,HEX2,HEX3; 
  output  [8:2]  LEDG; 
   output [17:0] LEDR;   
  input PS2_DAT;
  input PS2_CLK;
  inout  [35:0]  GPIO_0, GPIO_1;
  wire [7:0] scan_code;
  output led,led2;
  reg  led;
  reg led2;
  
  always @ (posedge CLOCK_50)
  begin
	if(scan_code == 8'h1C)
	  led = 1'b1;
	  else
	  led=1'b0;
	if(scan_code == 8'h23)
		led2=1'b1;
		else
		led2=1'b0;
	if(scan_code == 8'h29) begin
		led=1'b0;
		led2=1'b0;
		end
  end
  
  

	
  
 keyboardYO(CLOCK_50, KEY, SW, HEX0, HEX1,HEX2,HEX3, LEDR, PS2_DAT, PS2_CLK, GPIO_0, GPIO_1, scan_code);

endmodule

module keyboardYO(
  // Clock Input (50 MHz)
  input  CLOCK_50,
  //  Push Buttons
  input  [3:0]  KEY,
  //  DPDT Switches 
  input  [17:0]  SW,
  //  7-SEG Displays
  output  [6:0]  HEX0, HEX1,HEX2,HEX3, 
  //  LEDs
  output  [17:0] LEDR,//  LED Red[17:0]
  //  PS2 data and clock lines        
  input    PS2_DAT,
  input    PS2_CLK,
  //  GPIO Connections
  inout  [35:0]  GPIO_0, GPIO_1,
  output [7:0] scan_code
);

//  set all inout ports to tri-state
assign  GPIO_0    =  36'hzzzzzzzzz;
assign  GPIO_1    =  36'hzzzzzzzzz;

wire RST;
assign RST = KEY[0];
	
// Connect dip switches to red LEDs
assign LEDR[17:0] = SW[17:0];


wire reset = 1'b0;


reg [7:0] history[1:4];
wire read, scan_ready;


oneshot pulser(
   .pulse_out(read),
   .trigger_in(scan_ready),
   .clk(CLOCK_50)
);

keyboard kbd(
  .keyboard_clk(PS2_CLK),
  .keyboard_data(PS2_DAT),
  .clock50(CLOCK_50),
  .reset(reset),
  .read(read),
  .scan_ready(scan_ready),
  .scan_code(scan_code)
);
//stuff were sending over for the hex to display
hex_7seg dsp0(history[1][3:0],HEX0);  //adding control signals 1 and 0 for always blocks in hex display module
hex_7seg dsp1(history[1][7:4],HEX1);

hex_7seg dsp2(history[2][3:0],HEX2);
hex_7seg dsp3(history[2][7:4],HEX3);

//hex_7seg dsp4(history[3][3:0],HEX4);
//hex_7seg dsp5(history[3][7:4],HEX5);

//hex_7seg dsp6(history[4][3:0],HEX6);
//hex_7seg dsp7(history[4][7:4],HEX7);


always @(posedge scan_ready)
begin
    history[4] <= history[3];
    history[3] <= history[2];
    history[2] <= history[1];
    history[1] <= scan_code;
	// if(history[2] == 8'hf0)
	//led=1'b0;
		
		
end
    

// blank remaining digits
/*
wire [6:0] blank = 7'h7f;
assign HEX2 = blank;
assign HEX3 = blank;
assign HEX4 = blank;
assign HEX5 = blank;
assign HEX6 = blank;
assign HEX7 = blank;
*/

endmodule



module keyboard(keyboard_clk, keyboard_data, clock50, reset, read, scan_ready, scan_code);
input keyboard_clk;
input keyboard_data;//the actual input from the keyboard
input clock50; // 50 Mhz system clock
input reset;
input read;
output scan_ready;
output [7:0] scan_code;
reg ready_set;
reg [7:0] scan_code;
reg scan_ready;
reg read_char;
reg clock; // 25 Mhz internal clock

reg [3:0] incnt;
reg [8:0] shiftin;

reg [7:0] filter;
reg keyboard_clk_filtered;

// scan_ready is set to 1 when scan_code is available.
// user should set read to 1 and then to 0 to clear scan_ready

always @ (posedge ready_set or posedge read)
if (read == 1) scan_ready <= 0;
else scan_ready <= 1;

// divide-by-two 50MHz to 25MHz
always @(posedge clock50)
    clock <= ~clock;



// This process filters the raw clock signal coming from the keyboard 
// using an eight-bit shift register and two AND gates

always @(posedge clock)
begin
   filter <= {keyboard_clk, filter[7:1]};
   if (filter==8'b1111_1111) keyboard_clk_filtered <= 1;//if this filter is one, then it doesnt allow signal from keyboard
   else if (filter==8'b0000_0000) keyboard_clk_filtered <= 0;
end


// This process reads in serial data coming from the terminal

always @(posedge keyboard_clk_filtered)
begin
   if (reset==1)
   begin
      incnt <= 4'b0000;
      read_char <= 0;
   end
   else if (keyboard_data==0 && read_char==0)
   begin
    read_char <= 1;
    ready_set <= 0;
   end
   else
   begin
       // shift in next 8 data bits to assemble a scan code    
       if (read_char == 1)
           begin
              if (incnt < 9) 
              begin
                incnt <= incnt + 1'b1;
                shiftin = { keyboard_data, shiftin[8:1]};
                ready_set <= 0;
            end
        else
            begin
                incnt <= 0;
                scan_code <= shiftin[7:0];
                read_char <= 0;
                ready_set <= 1;
            end
        end
    end
end

endmodule


module oneshot(output reg pulse_out, input trigger_in, input clk);
reg delay;

always @ (posedge clk)
begin
    if (trigger_in && !delay) 
			pulse_out <= 1'b1;
    else pulse_out <= 1'b0;
    		delay <= trigger_in;
end 
endmodule

module hex_7seg(hex_digit,seg);
input [3:0] hex_digit;
output [6:0] seg;
reg [6:0] seg;
// seg = {g,f,e,d,c,b,a};
// 0 is on and 1 is off

always @ (hex_digit)
begin
case (hex_digit)
        4'h0: begin
		  seg = 7'b1000000;
		  end
        4'h1: begin
		  seg = 7'b1111001;
		  end								
        4'h2: begin
		  seg = 7'b0100100;
		  end									
        4'h3: begin
		  seg = 7'b0110000;   
		  end  
        4'h4: begin
		  seg = 7'b0011001;
		  end
        4'h5: begin 
		  seg = 7'b0010010; 
		  end 
        4'h6: begin 
		  seg = 7'b0000010; 
		  end
        4'h7: begin
		  seg = 7'b1111000;  
		  end 
        4'h8: begin 
		  seg = 7'b0000000;
		  end 
        4'h9: begin
		  seg = 7'b0011000;  
		  end
        4'ha: begin 
		  seg = 7'b0001000;
		  end
        4'hb: begin
		  seg = 7'b0000011;
		  end
        4'hc: begin
		  seg = 7'b1000110;;
		  end
        4'hd: begin
		  seg = 7'b0100001;
		  end
        4'he: begin
		  seg = 7'b0000110;
		  end
        4'hf: begin
		  seg = 7'b0001110;
		  end
endcase
end


endmodule 
